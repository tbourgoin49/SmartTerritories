<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8">
  <title>Smart Territories</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: sans-serif; padding: 20px; }
    table { border-collapse: collapse; width: 100%; margin-top: 20px; }
    th, td { border: 1px solid #ccc; padding: 8px; }
    th { background-color: #f2f2f2; }
    select { font-size: 16px; padding: 6px; margin-bottom: 20px; }
    #chartContainer { margin-top: 40px; max-width: 600px; }
  </style>
</head>
<body>
  <h1>Données par lieu</h1>

  <label for="lieuSelect">Choisir un lieu :</label>
  <select id="lieuSelect">
    <option value="Roseraie">Roseraie</option>
    <option value="Haut-Saint-Aubin">Haut-Saint-Aubin</option>
    <option value="Belle-Beille">Belle-Beille</option>
    <option value="Monplaisir">Monplaisir</option>
    <option value="Centre-Ville">Centre-Ville</option>
    <option value="Saint-Serge">Saint-Serge</option>
  </select>



  <table id="dataTable">
    <thead>
      <tr>
        <th>Date</th>
        <th>Heure</th>
        <th>Lieu</th>
        <th>Donnée 1</th>
        <th>Donnée 2</th>
        <th>Donnée 3</th>
        <th>Donnée 4</th>
        <th>Donnée 5</th>
        <th>Donnée 6</th>
        <th>Donnée 7</th>
        <th>Donnée 8</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <div id="chartContainer">
    <canvas id="barChart"></canvas>
  </div>

  <script>
    const REFRESH_INTERVAL = 3600000;
    const lieuSelect = document.getElementById('lieuSelect');
    const tableBody = document.querySelector('#dataTable tbody');
    const ctx = document.getElementById('barChart').getContext('2d');
    let chart;
    let intervalID;

    function buildApiUrl(lieu) {
      return `http://192.168.1.100:8080/SmartTerritories/allData`;
    }

    function updateTable(data) {
      const { date, heure, lieu, donnees } = data;
      const row = `
        <tr>
          <td>${date}</td>
          <td>${heure}</td>
          <td>${lieu}</td>
          ${donnees.map(val => `<td>${val}</td>`).join('')}
        </tr>
      `;
      tableBody.innerHTML = row;
    }

    function updateChart(data) {
      const labels = ['Température', 'Humidité', 'Pression Atmosphérique', 'SO2', 'NO2', 'O3', 'PM2.5', 
      'PM10'];
      const values = data.donnees;

      if (chart) {
        chart.data.datasets[0].data = values;
        chart.data.datasets[0].label = `Valeurs pour ${data.lieu}`;
        chart.update();
      } else {
        chart = new Chart(ctx, {
          type: 'bar',
          data: {
            labels: labels,
            datasets: [{
              label: `Valeurs pour ${data.lieu}`,
              data: values,
              backgroundColor: 'rgba(75, 192, 192, 0.6)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
            }]
          },
          options: {
            scales: {
              y: {
                beginAtZero: true
              }
            }
          }
        });
      }
    }

    async function fetchDataForLieu(lieu) {
      const url = buildApiUrl(lieu);
      try {
        const response = await fetch(url);
        const rawData = await response.json();

        // Filtrage par capteur/lieu
        const filteredData = rawData.filter(entry => entry.Capteur === lieu);

        // Regrouper par date/heure
        const grouped = {};
        for (const entry of filteredData) {
          const [date, heure] = entry.Date.split(' ');
          const key = `${date} ${heure}`;
          if (!grouped[key]) {
            grouped[key] = {
              date,
              heure,
              lieu: entry.Capteur,
              donnees: {}
            };
          }
          grouped[key].donnees[entry.TypeDeDonnee] = entry.Valeur;
        }

        // Dernière entrée par date
        const latestKey = Object.keys(grouped).sort().at(-1);
        const latest = grouped[latestKey];

        // Ordonner les types dans un ordre précis
        const orderedTypes = ["Temperature", "Humidite", "Pression_Atmos", "SO2", "NO2", "O3", "PM2.5", "PM10"];
        const donneesFinales = orderedTypes.map(type => latest.donnees[type] ?? 0);

        const finalData = {
          date: latest.date,
          heure: latest.heure,
          lieu: latest.lieu,
          donnees: donneesFinales
        };

        console.log("Données transformées :", finalData);
        updateTable(finalData);
        updateChart(finalData);

      } catch (err) {
        console.error("Erreur lors du fetch :", err);
      }
    }

    function startFetching(lieu) {
      clearInterval(intervalID);
      fetchDataForLieu(lieu);
      intervalID = setInterval(() => fetchDataForLieu(lieu), REFRESH_INTERVAL);
    }

    lieuSelect.addEventListener('change', () => {
      const lieu = lieuSelect.value;
      startFetching(lieu);
    });

    // Initialisation
    startFetching(lieuSelect.value);
  </script>
</body>
</html>
