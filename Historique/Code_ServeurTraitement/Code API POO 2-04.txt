Fichier database.js

//Ce fichier comprendra les classes de base de données ainsi que le schéma/modèle mongoose.
//
//Cela correspondra donc à notre classe entité représentant la base de données.

const mongoose = require("mongoose");

class CDatabase {
    constructor() {
        this._connect();
    }

//  Ecrit avec un "_" pour éviter de confondre avec le mongoose.connect
    _connect() {
        mongoose.connect("mongodb://127.0.0.1/Test_Database")
                .then(() => console.log("Connecté à MongoDB réussie"))
                .catch(err => console.error("Erreur de connexion à MongoDB :", err));
    }
}


class CModel {
    constructor() {
        const testDatabaseSchema = new mongoose.Schema({
            Capteur: String,           // Nom du capteur (lieu)
            TypeDeDonnee: String,      // Type de mesure (ex : Température)
            Date: String,              // Date sous forme de string
        }, {
            collection: 'Test_Database'

        });

        const TestDatabase = mongoose.model('Test_Database', testDatabaseSchema);

    }

    async getMesures(filtre) {
        return await this.TestDatabase.find(filtre);
    }
}

// On instancie la base de données au chargement
new CDatabase();

module.exports = new CModel();




Fichier requetes.js

//Ce fichier et ainsi cette classe regroupera toutes les requêtes utilisées par l'API
//
//Cette classe servira donc de contrôle étant donné que notre point d'entrée est notre frontière.


const express = require("express");
const CModel = require("./database");

class CRequetes {
    constructor() {
        this.router = express.Router();
        this.initialiseRoutes();
    }

    // Middleware de validation des paramètres
    validationParams(req, res, next) {
        const paramsAutorises = ["Capteur", "TypeDeDonnee", "Date"];
        const paramsRecus = Object.keys(req.query);

        if (paramsRecus.find(param => !paramsAutorises.includes(param))) {
            return res.status(400).json({ message: "Paramètres invalides détectés." });
        }

        // Vérifier format de la date (si fournie)
        if (req.query.Date) {
            const regexDate = /^\d{2}-\d{2}-\d{4}$/;
            if (!regexDate.test(req.query.Date)) {
                return res.status(400).json({ message: "Format de date invalide. Utiliser JJ-MM-AAAA." });
            }
        }

        next();
    }

    // Route pour récupérer les mesures avec filtre
    async getMesures(req, res) {
        try {
            const { Capteur, TypeDeDonnee, Date } = req.query;
            const filtre = {};

            if (Capteur) {
                console.log("Filtre par capteur: ", Capteur);
                filtre.Capteur = Capteur;
            }

            if (TypeDeDonnee) {
                console.log("Filtre par TypeDeDonnee: ", TypeDeDonnee);
                filtre.TypeDeDonnee = TypeDeDonnee;
            }

            if (Date){
                console.log("Filtre par Date: ", Date);
                 filtre.Date = Date;
            }

            const retour = await CModel.getMesures(filtre);
            console.log("Retour des données: ", retour);

            if (retour.length === 0) {
                return res.status(404).json({ message: "Aucune donnée trouvée avec ces critères." });
            }

            res.json(retour);
        } catch (error) {
            console.log("Retour d'erreur: ", error);
            res.status(500).json({ message: "Erreur interne du serveur.", error });
        }
    }

    // Initialisation des routes
    initialiseRoutes() {
        this.router.get("/mesures", this.validationParams, this.getMesures.bind(this));
    }
}

// Export de l'instance de la classe avec les routes
module.exports = new CRequetes().router;




Fichier entry.js

//Fichier servant de point d'entrée à l'API
//
//Il incluera les fichiers des autres classes et servira ainsi de main.


const express = require("express");
const CRequetes = require("./requetes");

class CServer {
    constructor() {
        this.app = express();
        this.config();
        this.routes();
        this.start();
    }

    config() {
        this.app.use(express.json());
    }

    routes() {
        this.app.use("/api", CRequetes);
    }

    start() {
        const PORT = process.env.PORT || 8080;
        this.app.listen(PORT, () => console.log(`Serveur démarré sur le port ${PORT}`));
    }
}

// Lancement du serveur
new CServer();

